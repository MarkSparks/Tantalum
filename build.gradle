buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-cobertura-plugin:1.0'
        classpath files(antennaDir)
    }
}

// antenna ant tasks
ant.taskdef(resource: 'antenna.properties') {
    classpath {
        pathElement(path: buildscript.configurations.classpath.asPath)
    }
}

allprojects {

}

subprojects {
    repositories {
	flatDir {
	   name "windowsJRE"
	   dirs "${System.env.JAVA_HOME}/jre/lib"
	}
	flatDir {
           // Also requires 'ln -s /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/{classes,rt}.jar' to work
           name "osxJRE"
           dirs "${System.env.JAVA_HOME}/../Classes"
        }
	flatDir {
           name "wtk"
	   dirs "${System.env.JAVA_ME_HOME}/lib"
        }
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'cobertura'


    configurations {
        bootClasspath
        jreBootClasspath
        testBootClasspath
    }

    dependencies {
        bootClasspath 'wtk:midp_2.1'
        bootClasspath 'wtk:cldc_1.1'

	testBootClasspath configurations.bootClasspath
	jreBootClasspath 'jre:rt'
	jreBootClasspath 'jre:jsse'

	compile configurations.bootClasspath 
	// compile 'wtk:cdc_1.1' // Only exists in Java ME 3.2
        compile 'wtk:jsr172_1.0'
        compile 'wtk:jsr177_1.0'
        compile 'wtk:jsr280_1.0'

        testCompile "junit:junit:4.11"
        testCompile 'net.sourceforge.cobertura:cobertura:1.9.4.1'
        testCompile "org.mockito:mockito-all:1.9.5"
        testCompile "org.powermock:powermock-api-mockito:1.5"
        testCompile "org.powermock:powermock-module-junit4:1.5"
    }

    /**
     * Don't scan for test classes, as there will be an error with JavaME compiled classes
     */
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class" // whatever Ant pattern matches the test class files
    }

    project.ext.target = buildDir.toString()


    buildscript {
        dependencies {
            classpath files('../' + antennaDir)
        }
    }

    // antenna ant tasks
    ant.taskdef(resource: 'antenna.properties') {
        classpath {
            pathElement(path: buildscript.configurations.classpath.asPath)
        }
    }

    // file names
    project.ext.jarFile = target + '/' + jarFileName
    
    task preverify << {
        project.ext.wtkHome = "$System.env.JAVA_ME_HOME"
	project.ext.javaHome = "$System.env.JAVA_HOME"

        project.ext.errors = false
        if (project.ext.wtkHome == null || ''.equals(project.ext.wtkHome)) {
            println('project.ext.wtkHome was not set')
            project.ext.errors = true
        } else if (!file(project.ext.wtkHome).exists() || !file(project.ext.wtkHome).isDirectory()) {
            println('project.ext.wtkHome variable must point to the installatio of the Java ME SDK')
            project.ext.errors = true
        }
        
        if (antennaDir == null || ''.equals(antennaDir)) {
            println('antennaDir was not set, edit the antennaDir property in gradle.properties')
            project.ext.errors = true
        }

/*
        if (rtjar == null || ''.equals(rtjar)) {
           println("Variable 'rtjar' is not set. You will need to point this variable on the JRE rt.jar")
            project.ext.errors = true
        } else if (!file(rtjar).exists() || !file(rtjar).isFile()) {       
            println("Variable 'rtjar' must point to the runtime jar in the JRE installation")
            project.ext.errors = true
        }
        
        if (jssejar == null || ''.equals(jssejar)) {
            println("Variable 'jssejar' is not set. You will need to point this variable on security extensions in the JRE installation")
            project.ext.errors = true
        } else if (!file(jssejar).exists() || !file(jssejar).isFile()) {
            println("Variable 'jssejar' must point to the security extensions ir in the JRE installation")
            project.ext.errors = true
        }
*/
        
        if (project.ext.errors) {
            println("Error: Missing variables. Failing build")
            System.exit(1)
        }
        
    }

    task init(dependsOn: preverify) << {
        if (buildDir.isDirectory()) {
            ant.delete(dir: sourceSets.main.output.classesDir)
        }

        buildDir.mkdirs()
    }

    task wtkbuild(dependsOn: init) << {
        sourceSets.main.output.classesDir.mkdirs()
        sourceSets.main.output.resourcesDir.mkdirs()
       
        // wtk properties
        ant.property(name: 'wtk.home', value: project.ext.wtkHome)
        ant.property(name: 'wtk.cldc.version', value: cldcVersion)
        ant.property(name: 'wtk.midp.version', value: midpVersion)

        ant.wtkbuild(
            destdir: sourceSets.main.output.classesDir,
            encoding: sourceEncoding,
            source: javaVersion,
            srcDir: 'src', // TODO: Change this to a variable that's used to define the sourceSet
            includeantruntime: false,
            preverify: doPreverify) {
            bootclasspath {
                pathElement(path: configurations.bootClasspath.asPath)
            }
            classpath {
                pathElement(path: configurations.compile.asPath)
            }
        }
    }
}
