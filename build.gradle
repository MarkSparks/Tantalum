buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-cobertura-plugin:1.0'
        classpath 'com.android.tools.build:gradle:0.3'
        classpath files(antennaJar)
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply from: rootProject.projectDir.toString() + '/wtkbuild.gradle'
    apply plugin: 'java'
    apply plugin: 'cobertura'
    apply plugin: 'eclipse'

    configurations {
        bootClasspath
        jreBootClasspath
        testBootClasspath
        provided
        releaseJar
        codeCoverageJar
    }

    dependencies {
        testCompile "junit:junit:4.11"
        testCompile 'net.sourceforge.cobertura:cobertura:1.9.4.1'
        testCompile "org.mockito:mockito-all:1.9.5"
        testCompile "org.powermock:powermock-api-mockito:1.5"
        testCompile "org.powermock:powermock-module-junit4:1.5"
    }

    // Define a provided scope, as defined here
    // http://blog.codeaholics.org/2012/emulating-mavens-provided-scope-in-gradle/
    // The following lines are needed only when we build using the standard java compile
    // task. For wtk-build we set the classpath manually and thus it's not really needed
    sourceSets {
        main.compileClasspath += configurations.provided
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
    }
    // End of compileJava requirements
    project.tasks['javadoc'].classpath += configurations.provided

    /**
     * Don't scan for test classes, as there will be an error with JavaME compiled classes
     */
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class" // whatever Ant pattern matches the test class files
    }

    project.ext.target = buildDir.toString()


    buildscript {
        dependencies {
            classpath files(rootDir.absolutePath + "/" + antennaJar)
        }
    }

    // antenna ant tasks
    ant.taskdef(resource: 'antenna.properties') {
        classpath {
            pathElement(path: buildscript.configurations.classpath.asPath)
        }
    }

    project.ext.preprocessedSources = "${buildDir}/preprocessed-sources"

    sourceSets {
        preprocessed {
            java {
                srcDir project.ext.preprocessedSources
            }
        }
    }

    // Run static checks on the library code
    apply plugin: 'jdepend'
    apply plugin: 'pmd'
    apply plugin: 'project-report'
    apply plugin: 'findbugs'

    // Don't fail the build for static analysis warnings
    project.findbugs.ignoreFailures = true
    project.pmd.ignoreFailures = true

    // Enable HTML report generation
    tasks.withType(FindBugs) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }
    tasks.withType(Pmd) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }



    task compileJava(overwrite: true, dependsOn: wtkbuild) << {
    }

    task compilePreprocessedJava(overwrite: true, dependsOn: wtkprodbuild) << {
    }

    task createReleaseJar(type: Jar) {
        dependsOn compilePreprocessedJava
        from sourceSets.preprocessed.output
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }


    task createJarInstrumented(type: Jar) {
        dependsOn coberturaInstrumentMain
        classifier = 'instrumented'
        from sourceSets.main.output
        from sourceSets.main.cobertura.output
    }

    task createSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task createJavadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    project.tasks['build'].dependsOn createReleaseJar

    artifacts {
        codeCoverageJar createJarInstrumented
        releaseJar createReleaseJar
        archives createSourcesJar
        archives createJavadocJar
    }

    jar {
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}
