buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-cobertura-plugin:1.1.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'cobertura'


    configurations {
        bootClasspath
        jreBootClasspath
        testBootClasspath
        provided
        releaseJar
        codeCoverageJar
    }

    dependencies {
        testCompile "junit:junit:4.11"
        testCompile 'net.sourceforge.cobertura:cobertura:1.9.4.1'
        testCompile "org.mockito:mockito-all:1.9.5"
        testCompile "org.powermock:powermock-api-mockito:1.5"
        testCompile "org.powermock:powermock-module-junit4:1.5"
    }

    project.ext.preprocessedSources = "$buildDir/preprocessed-sources/main"
    // Define a provided scope, as defined here
    // http://blog.codeaholics.org/2012/emulating-mavens-provided-scope-in-gradle/
    // The following lines are needed only when we build using the standard java compile
    // task. For wtk-build we set the classpath manually and thus it's not really needed
    sourceSets {
        main.compileClasspath += configurations.provided
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }

        preprocessed {
            java {
                project.ext.preprocessedSources
            }

        }

    }
    // End of compileJava requirements
    project.tasks['javadoc'].classpath += configurations.provided

    /**
     * Don't scan for test classes, as there will be an error with JavaME compiled classes
     */
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class" // whatever Ant pattern matches the test class files
    }

    project.ext.target = buildDir.toString()

//
//    buildscript {
//        dependencies {
//            classpath files(rootDir.absolutePath + "/" + antennaJar)
//        }
//    }


    sourceSets {
        preprocessed {
            java {
                srcDir preprocessedSourceDirectory
            }
        }
    }
    apply plugin: 'jdepend'
    apply plugin: 'pmd'
    apply plugin: 'project-report'
    apply plugin: 'findbugs'

    // Don't fail the build for static analysis warnings
    project.findbugs.ignoreFailures = true
    project.pmd.ignoreFailures = true

    // Enable HTML report generation
    tasks.withType(FindBugs) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }
    tasks.withType(Pmd) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }

    compileJava {
        sourceCompatibility = '1.3'
        targetCompatibility = '1.3'

        options.encoding = 'UTF-8'
        // Enable this to be strict about warnings, and fail the build if there are any
//    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
    }

    compileTestJava {
        sourceCompatibility = '1.6'
        targetCompatibility = '1.6'

        options.encoding = 'UTF-8'
//    options.compilerArgs = ['-Xlint', '-Xlint:-serial', '-Xlint:-path']
    }



    task createSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task createJavadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    jar {
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    /**
     * Dummy preprocessor task, that currently just copies the source files to another directory.
     * This task will have to do, until we can integrate a non-JME-dependent preprocessor into
     * the build script
     */
    task preprocessSources(overwrite: true) << {
        file(project.ext.preprocessedSources).mkdirs()

        for (dir in sourceSets.main.java.srcDirs) {
            if (dir.exists()) {
                copy {
                    from dir.getAbsolutePath()
                    into project.ext.preprocessedSources
                }
            }
        }
    }


    task createReleaseJar(type: Jar) {
        dependsOn compilePreprocessedJava
        from sourceSets.preprocessed.output
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    compilePreprocessedJava.dependsOn preprocessSources
    build.dependsOn createReleaseJar

    artifacts {
        releaseJar createReleaseJar
        archives createSourcesJar
        archives createJavadocJar
    }
}
